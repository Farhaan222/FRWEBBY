function getRandomString(e){return crypto.randomBytes(e/2).toString("hex")}function getTextHash(e){let t=crypto.createHash("md5");return t.update(e),t.digest("hex")}function SweetAuth(e,t,r){let i={create:create,remove:function(e){return remove(this.email,e)},updatePassword:function(e,t){return updatePassword(this.email,e,t)},authenticate:(e,r)=>authenticate(e,r,t),deauthenticate:function(){return deauthenticate(this.email,this.isAuthorized)},isAuthorized:!1};e.user=t.user=i;try{let t=decodeURIComponent(e.headers.cookie),r=t.indexOf("sweet-auth-token=")+17;if(r>16){let e=t.indexOf(":",r)+TOKEN_STRENGTH+1,n=t.substring(r,e),[s,o]=n.split(":");i.email=s;let a=STORAGE_PATH+"/"+s+"/"+o+".tid";if(fs.existsSync(a)){let e=fs.statSync(a).birthtime;new Date-e>MAX_AUTH_TOKEN_AGE?fs.unlinkSync(a):i.isAuthorized=!0}}}catch(e){console.error(e)}r()}function create(e,t){return new Promise((r,i)=>{let n=STORAGE_PATH+"/"+e,s=n+"/password.md5";if(fs.existsSync(s))i(Error("User account already exists."));else{if(0==/\S+@\S+\.\S+/.test(e))return void i(Error("Invalid email address."));if(4>t.length)return void i(Error("Password must have at least 4 letters."));let o=getTextHash(t);try{fs.existsSync(n)||fs.mkdirSync(n),fs.writeFileSync(s,o)}catch(e){return void i(e)}r()}})}function remove(e,t){return new Promise((r,i)=>{try{let n=STORAGE_PATH+"/"+e,s=n+"/password.md5";if(!fs.existsSync(s))return void i(Error("Account does not exist."));{let e=fs.readFileSync(s);if(getTextHash(t)!=e)return void i(Error("Incorrect password."));fs.rmdirSync(n,{recursive:!0}),r()}}catch(e){return void i(e)}})}function updatePassword(e,t,r){return new Promise((i,n)=>{try{if(4>r.length)return void n(Error("New password must have at least 4 letters."));let s=STORAGE_PATH+"/"+e+"/password.md5";if(!fs.existsSync(s))return void n(Error("Account does not exist."));{let e=fs.readFileSync(s);if(getTextHash(t)!=e)return void n(Error("Incorrect password."));{let e=getTextHash(r);fs.writeFileSync(s,e),i()}}}catch(e){return void n(e)}})}function authenticate(e,t,r){return new Promise((i,n)=>{let s=STORAGE_PATH+"/"+e,o=s+"/password.md5";if(fs.existsSync(o))try{if(getTextHash(t)==fs.readFileSync(o).toString().trim()){let t=getRandomString(TOKEN_STRENGTH),n=e+":"+t;r.cookie("sweet-auth-token",n,{maxAge:MAX_AUTH_TOKEN_AGE}),fs.readdirSync(s).forEach(e=>{e.endsWith(".tid")&&fs.unlinkSync(s+"/"+e)});let o=s+"/"+t+".tid";return fs.writeFileSync(o,""),void i()}return void n(Error("Incorrect password: "+t))}catch(e){return void n(e)}else n(Error("Account: "+e+" does not exist."))})}function deauthenticate(e,t){return new Promise((r,i)=>{if(0==t)i(Error("User not authorized."));else try{let t=STORAGE_PATH+"/"+e;return fs.readdirSync(t).forEach(e=>{e.endsWith(".tid")&&fs.unlinkSync(t+"/"+e)}),void r()}catch(e){return void i(e)}})}const fs=require("fs"),crypto=require("crypto"),STORAGE_PATH=require("path").dirname(require.main.filename)+"/sweet-auth",TOKEN_STRENGTH=20,MAX_AUTH_TOKEN_AGE=2592e5;fs.existsSync(STORAGE_PATH)||fs.mkdirSync(STORAGE_PATH),module.exports=SweetAuth;